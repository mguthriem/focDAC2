from mantid.simpleapi import *
import FocDACUtilities as DAC
import SNAPParMgr as prm 
import importlib
importlib.reload(DAC)
importlib.reload(prm)

AllRuns = [49854,49857,49858]
#maskFileName='snap49870_8x8_binMskInfo.json'
maskFileName='snap49870msk.xml'
cleanUp = True
GSASOut = False  

########################################
# MAIN Workflow
########################################


#Create dictionary with run-specific parameters (unique for a given run)
#I'm thinking this likely will be auto-generated by a GUI

runRedPars={
  'maskFileName':'',
  'maskFileLoc':'',
  'runIPTS':'',
  'GSASFileLoc':''
}

runRedPars['maskFileName']=maskFileName

 
for run in AllRuns:
  DAC.setIPTS(run,runRedPars)
  runRedPars['maskFileLoc']=runRedPars['runIPTS'] + 'shared/'
  runRedPars['GSASFileLoc']=runRedPars['runIPTS'] + 'shared/SNAPRed/GSAS2/'
  TOF_runWS = DAC.preProcSNAP(run,runRedPars)  
  gpString = TOF_runWS + '_monitors' #a list of all ws to group
  
  #masking
  
  TOF_runWS_msk,mskTag = DAC.SNAPMsk(TOF_runWS,runRedPars) #mask run workspace
  TOF_rawVmB_msk,mskTag = DAC.SNAPMsk('TOF_rawVmB',runRedPars)

  #convert to d-spacing

  DSpac_runWS_msk = f'DSpac_{run}_{mskTag}'
  ConvertUnits(InputWorkspace=TOF_runWS_msk,
  OutputWorkspace=DSpac_runWS_msk,
  Target='dSpacing',
  EMode='Elastic',
  ConvertFromPointData=True)

  DSpac_VmB_msk = f'DSpac_rawVmB_{mskTag}'
  ConvertUnits(InputWorkspace=TOF_rawVmB_msk,
  OutputWorkspace=f'DSpac_rawVmB_{mskTag}',
  Target='dSpacing',
  EMode='Elastic',
  ConvertFromPointData=True)

  #Focus the data and vanadium using DiffractionFocusing for each of requested groups
  
  for gpNo, focGrp in enumerate(prm.focGroupLst):
    DiffractionFocussing(InputWorkspace=DSpac_runWS_msk,
    OutputWorkspace=f'{DSpac_runWS_msk}_{focGrp}',
    GroupingWorkspace=f'SNAP{focGrp}Gp')

    DiffractionFocussing(InputWorkspace=f'DSpac_rawVmB_{mskTag}',
    OutputWorkspace=f'DSpac_rawVmB_{mskTag}_{focGrp}',
    GroupingWorkspace=f'SNAP{focGrp}Gp')

    #make vanadium correction (complicated by mystery peaks)
    #(n.b. also no attenuation correction on V, but none on data either, this isn't quantatative)
    #Minus(LHSWorkspace=f'd{VRun}_{wstag}_d6', RHSWorkspace=f'd{VBRun}_{wstag}_d6', OutputWorkspace=f'dVmB_{wstag}')
    StripPeaks(InputWorkspace=f'DSpac_rawVmB_{mskTag}_{focGrp}',
    OutputWorkspace=f'DSpac_rawVmB_{mskTag}_{focGrp}_strp',
    FWHM=2, 
    PeakPositions='1.22,2.04,2.11,2.19', 
    BackgroundType='Quadratic')
    
    SmoothData(InputWorkspace=f'DSpac_rawVmB_{mskTag}_{focGrp}_strp', 
    OutputWorkspace=f'DSpac_VCorr_{mskTag}_{focGrp}',
    NPoints='9')

#Apply vanadium correction, and trim to usable limits

    Divide(LHSWorkspace=f'{DSpac_runWS_msk}_{focGrp}', 
    RHSWorkspace=f'DSpac_VCorr_{mskTag}_{focGrp}', 
    OutputWorkspace=f'{DSpac_runWS_msk}_{focGrp}_V')

    Rebin(InputWorkspace=f'{DSpac_runWS_msk}_{focGrp}_V', 
    OutputWorkspace=f'{DSpac_runWS_msk}_{focGrp}_VR',
    Params='0.5,-0.001,4.5', PreserveEvents=False)

    CropWorkspaceRagged(InputWorkspace=f'{DSpac_runWS_msk}_{focGrp}_VR', 
    OutputWorkspace=f'{DSpac_runWS_msk}_{focGrp}_VRT', 
    XMin=prm.focGroupDMin[gpNo], 
    XMax=prm.focGroupDMax[gpNo])

    gpString = gpString+ f',{DSpac_runWS_msk}_{focGrp}_VRT'

    if cleanUp:
        DeleteWorkspaces(WorkspaceList=f'DSpac_rawVmB_{mskTag}_{focGrp},'\
        f'DSpac_rawVmB_{mskTag}_{focGrp}_strp,'
        f'DSpac_VCorr_{mskTag}_{focGrp},'
        f'{DSpac_runWS_msk}_{focGrp},'
        f'{DSpac_runWS_msk}_{focGrp}_V,'
        f'{DSpac_runWS_msk}_{focGrp}_VR')    
    
  GroupWorkspaces(InputWorkspaces=gpString,
      OutputWorkspace=f'SNAP{run}_Red')

  if cleanUp:      
    DeleteWorkspaces(WorkspaceList=TOF_runWS_msk + \
    ','+TOF_runWS+\
    f',DSpac_rawVmB_{mskTag},'\
    f'DSpac_{run}_{mskTag}'    
    ) 
  

if cleanUp:
  DeleteWorkspaces(WorkspaceList=TOF_rawVmB_msk)

print('SNAPRed complete')
  #Group workspaces according to run number
#GroupWorkspaces(GlobExpression=str(run))
